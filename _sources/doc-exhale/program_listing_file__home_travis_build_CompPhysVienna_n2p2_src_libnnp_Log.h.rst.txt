
.. _program_listing_file__home_travis_build_CompPhysVienna_n2p2_src_libnnp_Log.h:

Program Listing for File Log.h
==============================

|exhale_lsh| :ref:`Return to documentation for file <file__home_travis_build_CompPhysVienna_n2p2_src_libnnp_Log.h>` (``/home/travis/build/CompPhysVienna/n2p2/src/libnnp/Log.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // n2p2 - A neural network potential package
   // Copyright (C) 2018 Andreas Singraber (University of Vienna)
   //
   // This program is free software: you can redistribute it and/or modify
   // it under the terms of the GNU General Public License as published by
   // the Free Software Foundation, either version 3 of the License, or
   // (at your option) any later version.
   //
   // This program is distributed in the hope that it will be useful,
   // but WITHOUT ANY WARRANTY; without even the implied warranty of
   // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   // GNU General Public License for more details.
   //
   // You should have received a copy of the GNU General Public License
   // along with this program.  If not, see <https://www.gnu.org/licenses/>.
   
   #ifndef LOG_H
   #define LOG_H
   
   #include <cstdio>  // FILE
   #include <fstream> // std::ofstream
   #include <string>  // std::string
   #include <vector>  // std::vector
   
   namespace nnp
   {
   
   class Log
   {
   public:
       Log();
       Log&                     operator<<(std::string const& entry);
       Log&                     operator<<(
                                         std::vector<std::string> const& entries);
       void                     addLogEntry(std::string const& entry);
       void                     addMultipleLogEntries(
                                         std::vector<std::string> const& entries);
       void                     registerCFilePointer(FILE** const& filePointer);
       void                     registerStreamPointer(
                                             std::ofstream* const& streamPointer);
       std::vector<std::string> getLog() const;
   
       bool writeToStdout;
   
   private:
       std::vector<std::string>    memory;
       std::vector<FILE**>         cFilePointers;
       std::vector<std::ofstream*> streamPointers;
   
       void addIntro();
   };
   
   }
   
   #endif
