
.. _program_listing_file__home_travis_build_CompPhysVienna_n2p2_src_libnnp_Stopwatch.h:

Program Listing for File Stopwatch.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_travis_build_CompPhysVienna_n2p2_src_libnnp_Stopwatch.h>` (``/home/travis/build/CompPhysVienna/n2p2/src/libnnp/Stopwatch.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // n2p2 - A neural network potential package
   // Copyright (C) 2018 Andreas Singraber (University of Vienna)
   //
   // This program is free software: you can redistribute it and/or modify
   // it under the terms of the GNU General Public License as published by
   // the Free Software Foundation, either version 3 of the License, or
   // (at your option) any later version.
   //
   // This program is distributed in the hope that it will be useful,
   // but WITHOUT ANY WARRANTY; without even the implied warranty of
   // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   // GNU General Public License for more details.
   //
   // You should have received a copy of the GNU General Public License
   // along with this program.  If not, see <https://www.gnu.org/licenses/>.
   
   #ifndef STOPWATCH_H
   #define STOPWATCH_H
   
   #if !(defined(__linux__) || defined(__MACH__))
   #pragma message("WARNING: Platform not supported.")
   #define NOTIME
   #endif
   
   #ifdef NOTIME
   #pragma message("WARNING: Compiling dummy Stopwatch class (-DNOTIME).")
   #endif
   
   #include <ctime>
   #ifdef __MACH__
   #include <mach/mach_time.h>
   #endif
   
   namespace nnp
   {
   
   class Stopwatch
   {
   
   public:
       Stopwatch();
       void                start();
       double              split();
       double              split(double* lap);
       double              stop();
       double              getTimeElapsed() const;
       void                reset();
   
   private:
       enum State
       {
           STOPPED,
           RUNNING
       };
   
       State               state;
       static const double NSEC;
       double              timeElapsed;
   #ifdef NOTIME
   #elif __linux__
       timespec            time;
   #elif __MACH__
       uint64_t            time;
   #endif
   
       double              updateTime();
   
   };
   
   }
   
   #endif
